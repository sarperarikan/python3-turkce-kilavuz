
Önemli Standart Kütüphane Modülleri " 


datetime Modülü

Bu bölümde, zaman, saat ve tarihlerle ilgili iþlemler yapmamýzý saðlayan önemli bir standart kütüphane modülünden söz edeceðiz. Bu modülün adý datetime.

datetime modülü; zaman, saat ve tarihlerle ilgili iþlemler yapabilmemiz için bize çeþitli fonksiyon ve nitelikler sunan bazý sýnýflardan oluþur. Bu modül içinde temel olarak üç farklý sýnýf bulunur.

Not

‘Sýnýf’ kavramýna çok takýlmayýn. Ýlerleyen derslerde sýnýflardan ayrýntýlý olarak söz edeceðiz.

datetime modülü içinde yer alan bu üç sýnýf þunlardýr:

date sýnýfý; tarihle ilgili iþlemler yapabilmemizi saðlayan fonksiyon ve nitelikleri barýndýrýr. 
time sýnýfý; zamanla/saatle ilgili iþlemler yapabilmemizi saðlayan fonksiyon ve nitelikleri barýndýrýr. 
datetime sýnýfý; date ve time sýnýflarýnýn birleþiminden ve ilave birkaç nitelik ve fonksiyondan oluþur. 
Buna göre, datetime adlý sýnýf hem date sýnýfýný hem de time sýnýfýný kapsadýðý için, datetime modülü ile iþlem yapmak istediðinizde, çoðunlukla yalnýzca datetime sýnýfýný kullanarak bütün iþlerinizi halledebilirsiniz.

Dolayýsýyla:

>>> from datetime import datetime

Komutunu vererek datetime modülü içindeki datetime adlý sýnýfý içe aktarmayý tercih edebilirsiniz.

Bakalým datetime modülünün datetime sýnýfý içinde neler varmýþ:

>>> dir(datetime)

['__add__', '__class__', '__delattr__', '__dir__', '__doc__', '__eq__',
'__forma t__', '__ge__', '__getattribute__', '__gt__', '__hash__',
'__init__', '__le__', '__lt__', '__ne__', '__new__', '__radd__',
'__reduce__', '__reduce_ex__', '__rep r__', '__rsub__', '__setattr__',
'__sizeof__', '__str__', '__sub__', '__subclass hook__', 'astimezone',
'combine', 'ctime', 'date', 'day', 'dst', 'fromordinal', 'fromtimestamp',
'hour', 'isocalendar', 'isoformat', 'isoweekday', 'max', 'microsecond',
'min', 'minute', 'month', 'now', 'replace', 'resolution', 'second',
'strftime', 'strptime', 'time', 'timestamp', 'timetuple', 'timetz', 'today',
'toord inal', 'tzinfo', 'tzname', 'utcfromtimestamp', 'utcnow', 'utcoffset',
'utctimetuple', 'weekday', 'year']

Elbette, eðer isterseniz doðrudan datetime modülünü de içe aktarabilirsiniz:

>>> import datetime

Bu durumda, datetime modülü içindeki datetime sýnýfýna eriþmek için modül adýný da kullanmanýz gerekir:

>>> dir(datetime.datetime)

Ýþte biz bu bölümde, yukarýdaki komutun çýktýsýnda gördüðümüz nitelik ve fonksiyonlar arasýndan en önemli olanlarýný inceleyeceðiz.


now()

datetime modülünün içindeki datetime sýnýfýnýn now() adlý fonksiyonu, bize içindeki bulunduðumuz andaki tarih, saat ve zaman bilgilerini verir. datetime modülünü import datetime þeklinde içe aktardýðýmýzý varsayarsak bunu þu þekilde kullanýyoruz:

>>> an = datetime.datetime.now()

Bu fonksiyon bize datetime.datetime adlý özel bir sýnýf nesnesi verir:

>>> an

datetime.datetime(2014, 12, 5, 9, 54, 53, 867108)

Bu özel sýnýfýn da kendine özgü birtakým nitelikleri bulunur.

Mesela year adlý niteliði kullanarak içinde bulunduðumuz yýlý sorgulayabiliriz:

>>> an.year

2014

Ayný þekilde aþaðýdaki nitelikler de, içinde bulunduðumuz ana iliþkin çeþitli bilgiler verir:

>>> an.month #ay

12

>>> an.day #gün

5

>>> an.hour #saat

10

>>> an.minute #dakika

20

>>> an.second #saniye

33

>>> an.microsecond #mikrosaniye

337309


today()

Bu fonksiyon now() ile ayný içeriðe ve iþleve sahiptir. today() fonksiyonunu now fonksiyonunu kullandýðýnýz gibi kullanabilirsiniz:

>>> bugün = datetime.datetime.today()

>>> bugün.year

2014

>>> bugün.month

12

>>> bugün.minute

35

>>> bugün.second

24

>>> bugün.microsecond

669774


ctime()

ctime() fonksiyonu, içinde bulunduðumuz ana iliþkin tarih ve zaman bilgilerini içeren okunaklý bir karakter dizisi verir. Bu fonksiyona, parametre olarak biraz önce oluþturduðumuza benzer bir datetime.datetime sýnýfý vermemiz gerekir. Yani:

>>> an = datetime.datetime.now()
>>> tarih = datetime.datetime.ctime(an)
>>> tarih

'Fri Dec  5 10:30:35 2014'

Bu fonksiyon tarihleri Ýngilizce olarak gösterir. Yukarýdaki çýktýya göre tarih 5 Aralýk Cuma 2014 saat 10:30:35.


strftime()

strftime() fonksiyonu, size tarih ve zaman bilgilerini ihtiyaçlarýnýz doðrultusunda biçimlendirme imkaný sunar.

Bu fonksiyon toplam iki parametre alýr. Ýlk parametre, týpký ctime() fonksiyonunda olduðu gibi, bir datetime.datetime sýnýfýdýr. Ýkinci parametre ise, tarih/zaman bilgisini içeren karakter dizisini nasýl biçimlendirmek istediðimizi gösteren bir biçimlendiricidir. Yani:

>>> an = datetime.datetime.now()
>>> tarih = datetime.datetime.strftime(an, '%c')
>>> tarih

'Fri 05 Dec 2014 12:53:21 PM '

Burada ilk parametre olarak an deðiþkeninin tuttuðu datetime.datetime sýnýfýný, ikinci parametre olarak ise %c adlý biçimlendiriciyi kullandýk.

%c dýþýnda baþka tarih biçimlendiricileri de bulunur:

%a:hafta gününün kýsaltýlmýþ adý 
%A:hafta gününün tam adý 
%b:ayýn kýsaltýlmýþ adý 
%B:ayýn tam adý 
%c:tam tarih, saat ve zaman bilgisi 
%d:sayý deðerli bir karakter dizisi olarak gün 
%j:belli bir tarihin, yýlýn kaçýncý gününe denk geldiðini gösteren 1-366 arasý bir sayý 
%m:sayý deðerli bir karakter dizisi olarak ay 
%U:belli bir tarihin yýlýn kaçýncý haftasýna geldiðini gösteren 0-53 arasý bir sayý 
%y:yýlýn son iki rakamý 
%Y:yýlýn dört haneli tam hali 
%x:tam tarih bilgisi 
%X:tam saat bilgisi 
Yukarýdaki biçimlendiricilerle ilgili birkaç örnek verelim:

>>> datetime.datetime.strftime(an, '%Y') # Yýl

'2014'

>>> datetime.datetime.strftime(an, %'X') # Saat

'12:26:32'

>>> datetime.datetime.strftime(an, '%d') # Gün

'05'

strftime() fonksiyonu öntanýmlý olarak Ýngilizce çýktý verecektir:

>>> datetime.datetime.strftime(an, '%A')

'Friday'

>>> datetime.datetime.strftime(an, '%B')

'December'

Eðer isterseniz, locale adlý baþka bir modülü kullanarak, strftime() modülünün, sisteminizdeki tanýmlý dili kullanmasýný saðlayabilirsiniz.

Bunun için öncelikle locale modülünü içe aktaralým:

>>> import locale

Ardýndan Python’ýn kullanmasýný istediðimiz yerel/dil bilgisini, sistemdeki öntanýmlý yerel/dil olarak ayarlayalým:

>>> locale.setlocale(locale.LC_ALL, '')

'Turkish_Turkey.1254'

Bu çýktý bize sistemimizdeki tanýmlý dilin/yerelin Türkçe olduðunu söylüyor. Bu komutu verdikten sonra, artýk strftime() fonksiyonu, ilgili dile/yerele uygun bir çýktý verecektir:

>>> datetime.datetime.strftime(an, '%B')

'Aralýk'

>>> datetime.datetime.strftime(an, '%A')

'Cuma'

Eðer isterseniz, dili kendiniz de seçebilirsiniz. Mesela Ýtalyanca yapalým:

>>> locale.setlocale(locale.LC_ALL, 'italian')

'Italian_Italy.1252'

>>> datetime.datetime.strftime(an, '%B')

'dicembre'

>>> datetime.datetime.strftime(an, '%A')

'venerdì'

Ayrýca bkz.

Yerel dil adlarý için Windows’ta http://msdn.microsoft.com/en-us/library/39cwe7zf%28vs.71%29.aspx adresine bakabilirsiniz. GNU/Linux’ta ise, desteklenen yerel/dil adlarýný görmek için sistem komut satýrýnda locale - a komutunu verebilirsiniz.

Yukarýda gördüðünüz tarih biçimlendiricileri kullanarak istediðiniz karmaþýklýktaki tarihleri oluþturabilirsiniz. Mesela:

>>> datetime.datetime.strftime(an, '%d %B %Y')

'05 Aralýk 2014'

Veya:

>>> datetime.datetime.strftime(an, '%d.%m.%Y tarihinde buluþalým.')

‘05.12.2014 tarihinde buluþalým.’


Gördüðünüz gibi, strftime() fonksiyonu, tarihler üzerinde istediðimiz karakter dizisi biçimlendirme iþlemini uygulayabilmemizi saðlýyor.


strptime()

Diyelim ki elimizde, herhangi bir kaynaktan gelmiþ þöyle bir karakter dizisi var:

>>> t = '27 Mayýs 2014'

Amacýmýz, tarih bilgisi içeren bu karakter dizisini gün, ay ve yýl öðelerine ayýrmak. Bunun için basitçe þöyle bir kod yazabiliriz:

>>> gün, ay, yýl = t.split()
>>> gün

'27'

>>> ay

'Mayýs'

>>> yýl

'2014'

Peki eðer elimizdeki karakter dizisi þöyle bir þeyse ne yapacaðýz?

>>> t = '27 Mayýs 2014 saat 12:34:44'

Bunun için de t deðiþkeni üzerine split() metodunu uyguladýktan sonra ‘saat’ kelimesini listeden atmayý tercih edebiliriz:

>>> gün, ay, yýl, saat = [i for i in t.split() if 'saat' not in i]
>>> gün

'27'

>>> ay

'Mayýs'

>>> yýl

'2014'

>>> saat

'12:34:44'

Yukarýdaki yöntemler, tarih bilgisi içeren karakter dizilerini ayýklamak için geçerli ve uygun olsa da epey meþakkatlidir. Üstelik bu þekilde ayýkladýðýmýz verilerin kullaným alaný da oldukça kýsýtlý olacaktýr. Mesela bu verileri datetime.datetime türünde verileri bekleyen uygulamalar içinde kullanamayýz.

Ýþte böyle bir durumda strptime() adlý fonksiyon devreye girerek, tarih/zaman bilgisi içeren herhangi bir karakter dizisini datetime.datetime türünde bir nesneye dönüþtürebilmemiz için bize bir yol sunar.

Þimdi dikkatlice bakýn:

Elimizdeki karakter dizisi þu:

>>> t = '27 Mayýs 2014 saat 12:34:44'

Þimdi bu karakter dizisini strptime() fonksiyonunu kullanarak ayýklýyoruz:

>>> z = datetime.datetime.strptime(t, '%d %B %Y saat %H:%M:%S')

datetime.datetime(2014, 5, 27, 0, 34, 44)

Gördüðünüz gibi, strptime() fonksiyonu iki parametre alýyor. Ýlk parametre, ayýklamak istediðimiz, tarih-zaman bilgisi içeren karakter dizisi. Ýkinci parametre ise, bu karakter dizisinin yapýsýný temsil eden tarih biçimlendiricilerden oluþan baþka bir karakter dizisi. Bu karakter dizisi, '27 Mayýs 2014 saat 12:34:44' adlý karakter dizisinin içindeki, tarih ve saati gösteren kýsýmlarýn her biri için bir biçimlendirici içeriyor:

27 ==> %d
Mayýs ==> %B
2014 ==> %Y
12 ==> %H
34 ==> %M
44 ==> %S

Bu þekilde bir datetime.datetime nesnesi oluþturduktan sonra, artýk bu nesnenin öðelerine, herhangi bir datetime.datetime nesnesi gibi eriþebiliriz:

>>> z.month #ay

5

>>> z.day #gün

27

>>> z.year #yýl

2014

>>> z.hour #saat

12

>>> z.minute #dakika

34

>>> z.second #saniye

44


fromtimestamp()

Hatýrlarsanýz os modülünü anlatýrken stat() adlý bir fonksiyondan söz etmiþtik. Bu fonksiyonun, dosyalar hakkýnda bilgi almamýzý saðladýðýný biliyorsunuz:

>>> os.stat('dosya_adý')

Mesela bir dosyanýn son deðiþtirilme tarihi öðrenmek için þöyle bir kod kullanýyorduk:

>>> os.stat('dosya_adý').st_mtime

st_mtime niteliði bize þuna benzer bir çýktý veriyor:

1417784445.8881965

Bu, içinde ayrýntýlý tarih bilgisi barýndýran bir zaman damgasýdýr (timestamp). Ýþte bu zaman damgasýný anlamlý bir tarih bilgisine dönüþtürebilmek için datetime modülünün datetime sýnýfý içindeki fromtimestamp() adlý fonksiyondan yararlanacaðýz:

>>> zaman_damgasý = os.stat('dosya_adý').st_mtime
>>> tarih = datetime.datetime.fromtimestamp(zaman_damgasý)
>>> tarih

datetime.datetime(2014, 12, 5, 15, 0, 45, 888196)

Bu þekilde bir datetime.datetime nesnesi elde ettikten sonra artýk bu nesneyi istediðimiz þekilde manipüle edebiliriz. Mesela:

>>> datetime.datetime.strftime(tarih, '%c')

'12/05/14 15:00:45'

Demek ki 1417784445.8881965 zaman damgasý, içinde ‘12/05/14 15:00:45’ tarihini barýndýrýyormuþ.


timestamp()

Eðer datetime.datetime nesnelerinden bir zaman damgasý üretmek isterseniz timestamp() fonksiyonunu kullanabilirsiniz:

>>> tarih = datetime.datetime.now()
>>> zaman_damgasý = datetime.datetime.timestamp(tarih)
>>> zaman_damgasý

1417790594.558625

Eðer daha sonra bu zaman damgasýný anlamlý bir tarihe dönüþtürmeniz gerekirse fromtimestamp() fonksiyonunu kullanabileceðinizi biliyorsunuz:

>>> tarih = datetime.datetime.fromtimestamp(zaman_damgasý)


Tarihlerle Ýlgili Aritmetik Ýþlemler

datetime modülünü kullanarak, tarihler arasýnda çýkarma-toplama gibi çeþitli aritmetik iþlemler de yapabilirsiniz. Bu bölümde bu iþlemleri nasýl yapacaðýmýzý anlatacaðýz.


Belirli Bir Tarihi Kaydetmek

Python’da datetime modülünü kullanarak bugünün tarihini bir datetime.datetime sýnýfý olarak nasýl alabileceðimizi biliyoruz:

>>> datetime.datetime.now()

veya:

>>> datetime.datetime.today()

Peki biz mesela bugünün deðil de, geçmiþteki veya gelecekteki belirli bir tarihi almak istersek ne yapacaðýz?

Bu iþ içinde yine datetime modülünün datetime adlý sýnýfýndan yararlanacaðýz.

Diyelim ki 16 Þubat 2016, saat 13:45:32’yi bir datetime sýnýfý olarak kaydetmek istiyoruz. Bunun için þöyle bir kod kullanacaðýz:

>>> tarih = datetime.datetime(2016, 2, 16, 13, 45, 32)

Gördüðünüz gibi, belirli bir tarihi bir datetime.datetime nesnesi olarak kaydetmek istediðimizde datetime sýnýfýna parametre olarak sýrasýyla ilgili tarihin yýl, ay, gün, saat, dakika ve saniye kýsýmlarýný giriyoruz.

Bu arada, eðer isterseniz bu tarih için bir mikrosaniye de belirtebilirsiniz:

>>> tarih = datetime.datetime(2016, 2, 16, 13, 45, 32, 5)

Böylece belirli bir tarihi bir datetime sýnýfý olarak kaydetmiþ olduk. Bu sýnýf, datetime.datetime nesnelerinin bütün özelliklerine sahiptir:

>>> tarih.year #yýl

2016

>>> tarih.day #gün

16

>>> tarih.month #ay

2


Ýki Tarih Arasýndaki Farký Bulmak

Size þöyle bir soru sormama izin verin: Diyelim ki bugünün tarihi 9 Aralýk 2014. Doðum tarihimizin 27 Mayýs olduðunu varsayarsak, acaba 2015 yýlýndaki doðum günümüze kaç gün kaldýðýný nasýl bulabiliriz?

Bunun için öncelikle bugünün tarihini bir datetime.datetime nesnesi olarak alalým:

>>> bugün = datetime.datetime.today()

Þimdi de doðumgünümüze denk gelen tarihi bir datetime.datetime nesnesi olarak kaydedelim:

>>> doðumgünü = datetime.datetime(2015, 5, 27)

Þimdi de bu iki tarih arasýndaki farký bulalým:

>>> fark = doðumgünü - bugün
>>> fark

datetime.timedelta(168, 34694, 719236)

Buradan elde ettiðimiz þey bir timedelta nesnesi. Bu nesne, tarihler arasýndaki farký gün, saniye ve mikrosaniye olarak tutan özel bir veri tipidir. Yukarýdaki çýktýdan anladýðýmýza göre, 27 Mayýs 2015 tarihi ile 9 Aralýk 2014 tarihi arasýnda 168 gün, 34694 saniye ve 719236 mikrosaniye varmýþ...

Yukarýdaki timedelta nesnesinin niteliklerine þu þekilde ulaþabilirsiniz:

>>> fark.days #gün

168

>>> fark.seconds #saniye

34694

>>> fark.microseconds #mikrosaniye

719236


Ýleri Bir Tarihi Bulmak

Diyelim ki 200 gün sonra hangi tarihte olacaðýmýzý bulmak istiyoruz. Týpký bir önceki baþlýkta tartýþtýðýmýz gibi, bu isteðimizi yerine getirmek için de timedelta nesnesinden yararlanacaðýz.

Önce bugünün tarihini bulalým:

>>> bugün = datetime.datetime.today()

Þimdi 200 günlük farký bir timedelta nesnesi olarak kaydedelim:

>>> fark = datetime.timedelta(days=200)

Burada datetime modülünün timedelta() fonksiyonunun days adlý parametresini 200 deðeri ile çaðýrdýðýmýza dikkat edin. days adlý parametrenin dýþýnda, timedelta() fonksiyonu þu parametrelere de sahiptir:

>>> fark = datetime.timedelta(days=200, seconds=40, microseconds=30)

Gördüðünüz gibi, gün dýþýnda saniye (seconds) ve mikrosaniye (microseconds) ayarlarýný da yapabiliyoruz. Yukarýdaki belirlediðimiz timedelta nesnesi doðrultusunda 200 gün, 40 saniye ve 30 mikrosaniye geleceðe gidelim:

>>> gelecek = bugün + fark

>>> gelecek

datetime.datetime(2015, 6, 27, 14, 47, 32, 826771)

Bu tarihi anlamlý bir karakter dizisine dönüþtürelim:

>>> gelecek.strftime('%c')

'27.06.2015 14:47:32'

Demek ki bugünden 200 gün, 40 saniye ve 30 mikrosaniye sonrasý 27 Haziran 2015, saat 14:47:32’ye denk geliyormuþ...


Geçmiþ Bir Tarihi Bulmak

Geçmiþ bir tarihi bulmak da, tahmin edebileceðiniz gibi, ileri bir tarihi bulmaya çok benzer. Basit bir örnek verelim:

>>> bugün = datetime.datetime.today()

Bugünden 200 gün geriye gidelim:

>>> fark = datetime.timedelta(days=200)
>>> geçmiþ = bugün - fark
>>> geçmiþ

datetime.datetime(2014, 5, 23, 15, 5, 11, 487643)

>>> geçmiþ.strftime('%c')

'23.05.2014 15:05:11'

Demek ki 200 gün öncesi 23 Mayýs 2014 imiþ...


