
Listelerin Öðelerine Eriþmek

Týpký karakter dizilerinde olduðu gibi, listelerde de her öðenin bir sýrasý vardýr. Hatýrlarsanýz karakter dizilerinin öðelerine þu þekilde ulaþýyorduk:

>>> kardiz = "python"
>>> kardiz[0]

'p'

Bu bölümdeki birkaç örnekte de gördüðünüz gibi, listelerin öðelerine ulaþýrken de ayný yöntemi kullanabiliyoruz:

>>> meyveler = ["elma", "armut", "çilek", "kiraz"]
>>> meyveler[0]

'elma'

Yalnýz yöntem ayný olsa da yukarýdaki iki çýktý arasýnda bazý farklar olduðunu da gözden kaçýrmayýn. Bir karakter dizisinin 0. öðesini aldýðýmýzda o karakter dizisinin ilk karakterini almýþ oluyoruz. Bir listenin 0. öðesini aldýðýmýzda ise o listenin ilk öðesini almýþ oluyoruz.

Sayma yöntemi olarak ise karakter dizileri ve listelerde ayný mantýk geçerli. Hem listelerde hem de karakter dizilerinde Python saymaya 0‘dan baþlýyor. Yani karakter dizilerinde olduðu gibi, listelerde de ilk öðenin sýrasý 0.

Eðer bu listenin öðelerinin hepsine tek tek ulaþmak isterseniz for döngüsünden yararlanabilirsiniz:

meyveler = ["elma", "armut", "çilek", "kiraz"]

for meyve in meyveler:
print(meyve)

Bu listedeki öðeleri numaralandýrmak da mümkün:

meyveler = ["elma", "armut", "çilek", "kiraz"]

for öðe_sýrasý in range(len(meyveler)):
print("{}. {}".format(öðe_sýrasý, meyveler[öðe_sýrasý]))

...veya enumerate() fonksiyonunu kullanarak þöyle bir þey de yazabiliriz:

for sýra, öðe in enumerate(meyveler, 1):
print("{}. {}".format(sýra, öðe))

Dediðimiz gibi, liste öðelerine ulaþmak için kullandýðýmýz yöntem, karakter dizilerinin öðelerine ulaþmak için kullandýðýmýz yöntemle ayný. Aslýnda karakter dizileri ile listeler arasýndaki benzerlik bununla sýnýrlý deðildir. Benzerlikleri birkaç örnek üzerinde gösterelim:

>>> meyveler = ["elma", "armut", "çilek", "kiraz"]
>>> meyveler[-1]

'kiraz'

Karakter dizilerinde olduðu gibi, öðe sýrasýný eksi deðerli bir sayý yaptýðýmýzda liste öðeleri sondan baþa doðru okunuyor. Dolayýsýyla meyveler[-1] komutu bize meyveler adlý listenin son öðesini veriyor.

>>> meyveler[0:2]

['elma', 'armut']

Karakter dizileri konusunu iþlerken öðrendiðimiz dilimleme yöntemi listeler için de aynen geçerlidir. Orada öðrendiðimiz dilimleme kurallarýný listelere de uygulayabiliyoruz. Örneðin liste öðelerini ters çevirmek için þöyle bir kod yazabiliyoruz:

>>> meyveler[::-1]

['kiraz', 'çilek', 'armut', 'elma']

Bu bölümün baþýnda da söylediðimiz gibi, liste adlý veri tipi, içinde baþka bir liste de barýndýrabilir. Buna þöyle bir örnek vermiþtik:

>>> liste = ["Ali", "Veli", ["Ayþe", "Nazan", "Zeynep"], 34, 65, 33, 5.6]

Bu listedeki öðeler þunlardýr:

Ali
Veli
['Ayþe', 'Nazan', 'Zeynep']
34
65
33
5.6

Gördüðünüz gibi, bu liste içinde [‘Ayþe’, ‘Nazan’, ‘Zeynep’] gibi bir liste daha var. Bu liste ana listenin öðelerinden biridir ve bu da öteki öðeler gibi tek öðelik bir yer kaplar. Yani:

>>> len(liste)

7

Bu çýktýdan anlýyoruz ki, listemiz toplam 7 öðeden oluþuyor. Listenin 2. sýrasýnda yer alan listenin kendisi üç öðeden oluþtuðu halde bu öðe ana liste içinde sadece tek öðelik bir yer kaplýyor. Yani 2. sýradaki listenin öðeleri tek tek sayýlmýyor. Peki böyle bir liste içindeki gömülü listenin öðelerini elde etmek istersek ne yapacaðýz? Yani mesela içe geçmiþ listenin tamamýný deðil de, örneðin sadece “Ayþe” öðesini almak istersek ne yapmamýz gerekiyor? Dikkatlice bakýn:

>>> liste[2][0]

'Ayþe'

“Nazan” öðesini almak için:

>>> liste[2][1]

'Nazan'

“Zeynep” öðesini almak için:

>>> liste[2][2]

'Zeynep'

Gördüðünüz gibi, iç içe geçmiþ listelerin öðelerini almak oldukça basit. Yapmamýz gereken tek þey, gömülü listenin önce ana listedeki konumunu, ardýndan da almak istediðimiz öðenin gömülü listedeki konumunu belirtmektir.

Ýstersek gömülü listeyi ayrý bir liste olarak da alabiliriz:

>>> yeni_liste = liste[2]
>>> yeni_liste

['Ayþe', 'Nazan', 'Zeynep']

Böylece bu listenin öðelerine normal bir þekilde ulaþabiliriz:

>>> yeni_liste[0]

'Ayþe'

>>> yeni_liste[1]

'Nazan'

>>> yeni_liste[2]

'Zeynep'

Eðer bir listenin öðelerine eriþmeye çalýþýrken, varolmayan bir sýra sayýsý belirtirseniz Python size bir hata mesajý gösterecektir:

>>> liste = range(10)
>>> print(len(liste))

10

Burada range() fonksiyonundan yararlanarak 10 öðeli bir liste tanýmladýk. Bu listenin son öðesinin þu formüle göre bulunabileceðini karakter dizileri konusundan hatýrlýyor olmalýsýnýz:

>>> liste[len(liste)-1]

9

Demek ki bu listenin son öðesi 9 sayýsý imiþ... Bir de þunu deneyelim:

>>> liste[10]

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: range object index out of range

Gördüðünüz gibi, listemizde 10. öðe diye bir þey olmadýðý için Python bize IndexError tipinde bir hata mesajý gösteriyor. Çünkü bu listenin son öðesinin sýrasý len(liste)-1, yani 9‘dur.
