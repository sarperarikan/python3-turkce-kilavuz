
Önemli Standart Kütüphane Modülleri " 


time Modülü

time modülü, bir önceki bölümde öðrendiðimiz datetime modülüne benzer. Hatta bu iki modülün ayný iþi yapan ortak nitelik ve fonksiyonlarý vardýr. Ancak datetime modülünden farklý olarak time modülünü daha çok saatle ilgili iþlemleri yapmak için kullanacaðýz.

Her zaman olduðu gibi, bu modülü kullanabilmek için de öncelikle modülü içe aktarmamýz gerekiyor:

>>> import time

Modülü içe aktardýðýmýza göre, artýk modülün içeriðinden yararlanabiliriz.


gmtime()

Python’da (ve baþka programlama dillerinde), zaman-tarih hesaplamalarýnda ‘zamanýn baþlangýcý’ (EPOCH) diye bir kavram bulunur. ‘Zamanýn baþlangýcý’, bir iþletim sisteminin, tarih hesaplamalarýnda sýfýr noktasý olarak aldýðý tarihtir. Kullandýðýnýz iþletim sisteminin hangi tarihi ‘zamanýn baþlangýcý’ olarak kabul ettiðini bulmak için þu komutu verebilirsiniz:

>>> time.gmtime(0)

Buradan þu çýktýyý alýyoruz:

time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0,
tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)

Bu, struct_time adlý özel bir veri tipidir. Bu veri tipi içindeki niteliklere þu þekilde ulaþabilirsiniz:

>>> epoch = time.gmtime(0)
>>> epoch.tm_year #yýl

1970

>>> epoch.tm_mon #ay

1

>>> epoch.tm_mday #gün

1

Demek ki zamanýn baþlangýcý 1 Ocak 1970 tarihi olarak alýnýyormuþ... Ýþte bilgisayarýmýz, içinde bulunduðumuz zaman ve saati, bu baþlangýç zamanýndan bu yana geçen saniyeleri hesaplayarak bulur.

gmtime() fonksiyonunu parametresiz olarak kullandýðýnýzda, o anda içinde bulunduðunuz tarih ve saat bilgisini elde edersiniz.

time.struct_time(tm_year=2014, tm_mon=12, tm_mday=10, tm_hour=12, tm_min=5, tm_sec=33, tm_wday=2, tm_yday=344, tm_isdst=0)

Ancak bu çýktý, özellikle saat kýsmý konusunda her zaman doðru olmayabilir. Çýktýnýn birkaç saat saptýðýný görebilirsiniz.


time()

time() fonksiyonu, zamanýn baþlangýcýndan, o anda içinde bulunduðumuz ana kadar geçen toplam saniye miktarýný verir:

>>> time.time()

1418213083.726988

Elde ettiðiniz bu deðeri, gmtime() fonksiyonunu kullanarak anlamlý bir tarih deðerine dönüþtürebilirsiniz:

>>> time.gmtime(time.time())

time.struct_time(tm_year=2014, tm_mon=12, tm_mday=10,
tm_hour=12, tm_min=9, tm_sec=19, tm_wday=2, tm_yday=344,
tm_isdst=0)

Ancak bu çýktý da özellikle saat kýsmýnda sapmalara uðrayabilir.


localtime()

Týpký gmtime() fonksiyonundan olduðu gibi, anlýk tarih ve zaman bilgisini bir struct_time nesnesi olarak almak için localtime() fonksiyonunu da kullanabiliriz. Bu fonksiyon bize yerel saati doðru bir þekilde verecektir:

>>> time.localtime()

time.struct_time(tm_year=2014, tm_mon=12, tm_mday=10,
tm_hour=14, tm_min=24, tm_sec=21, tm_wday=2, tm_yday=344, tm_isdst=0)

Bu nesnenin içindeki yýl, ay ve gün gibi bilgilere tek tek nasýl eriþebileceðinizi biliyorsunuz.


asctime()

Baþta da söylediðimiz gibi, time modülü, datetime modülüne benzer. Bunlarýn ayný iþi gören çeþitli fonksiyonlarý vardýr. Bir örnek verelim.

Hatýrlarsanýz, bugünün tarihini bir karakter dizisi olarak almak için datetime modülünü þu þekilde kullanabiliyorduk:

>>> import datetime
>>> an = datetime.datetime.now()
>>> datetime.datetime.ctime(an)

'Wed Dec 10 13:56:22 2014'

Yukarýdaki iþlemi time modülünün asctime() fonksiyonunu kullanarak da yapabiliriz:

>>> import time
>>> time.asctime()

'Wed Dec 10 13:58:31 2014'

asctime() fonksiyonu tercihe baðlý bir parametre de alabilir. Ýsterseniz bu fonksiyona 9 öðeli bir demet veya bir struct_time nesnesi verebilirsiniz.

Yukarýda, gmtime() fonksiyonunun bir struct_time nesnesi ürettiðini öðrenmiþtik. Dolayýsýyla bu nesneyi asctime() fonksiyonuna parametre olarak verebilirsiniz:

>>> time.asctime(time.gmtime())

'Wed Dec 10 12:14:29 2014'

>>> time.asctime(time.gmtime(0))

'Thu Jan  1 00:00:00 1970'

Ayný þekilde localtime() fonksiyonunun da bize bir struct_time() nesnesi verdiðini biliyoruz. Dolayýsýyla bu fonksiyon da asctime() fonksiyonuna parametre olarak verilebilir:

>>> time.asctime(time.localtime())

'Wed Dec 10 14:28:05 2014'

Veya, sýrasýyla yýl, ay, gün, saat, dakika, saniye, haftanýn günü, yýlýn günü, gün ýþýðýndan yararlanma durumu deðerini içeren bir demet de oluþturabilir, daha sonra bunu asctime() fonksiyonuna parametre olarak verebilirsiniz:

>>> demet = (2014, 5, 27, 13, 45, 23, 0, 0, 0)
>>> time.asctime(demet)

Ancak özellikle haftanýn günü, yýlýn günü ve gün ýþýðýndan yararlanma durumu bilgilerini doðru tahmin etmek zor olduðu için, bu demeti elle oluþturmanýzý pek tavsiye etmem.


strftime()

Hatýrlarsanýz datetime modülünü anlatýrken, datetime sýnýfý içindeki strftime() adlý bir fonksiyondan söz etmiþtik. Bu fonksiyonun, tarih-saat bilgisi içeren karakter dizilerini manipüle edebilmemizi saðladýðýný biliyorsunuz.

Bu fonksiyonu þöyle kullanýyorduk:

>>> import datetime
>>> an = datetime.datetime.now()
>>> datetime.datetime.strftime(an, '%c')

'10.12.2014 14:57:48'

Ýþte yukarýdaki iþlemi, time modülünün strftime() fonksiyonunu kullanarak biraz daha pratik bir þekilde gerçekleþtirebiliriz:

>>> import time
>>> time.strftime('%c')

'10.12.2014 14:58:02'

datetime modülünü incelerken gördüðümüz tarih biçimlendiricileri time modülü için de geçerlidir:

%a:hafta gününün kýsaltýlmýþ adý 
%A:hafta gününün tam adý 
%b:ayýn kýsaltýlmýþ adý 
%B:ayýn tam adý 
%c:tam tarih, saat ve zaman bilgisi 
%d:sayý deðerli bir karakter dizisi olarak gün 
%j:belli bir tarihin, yýlýn kaçýncý gününe denk geldiðini gösteren 1-366 arasý bir sayý 
%m:sayý deðerli bir karakter dizisi olarak ay 
%U:belli bir tarihin yýlýn kaçýncý haftasýna geldiðini gösteren 0-53 arasý bir sayý 
%y:yýlýn son iki rakamý 
%Y:yýlýn dört haneli tam hali 
%x:tam tarih bilgisi 
%X:tam saat bilgisi 

Uyarý

Sistem yerelinin locale modülü aracýlýðýyla Türkçeye ayarlanmýþ olmasý gerektiðini unutmuyoruz:

import locale
locale.setlocale(locale.LC_ALL, 'turkish')


strptime()

time modülünün strptime() fonksiyonunun yaptýðý iþ, datetime modülünün datetime sýnýfýnýn strptime() fonksiyonunun yaptýðý iþe çok benzer:

>>> import datetime
>>> t = '27 Mayýs 1980'
>>> tarih = datetime.datetime.strptime(t, '%d %B %Y')
>>> tarih

datetime.datetime(1980, 5, 27, 0, 0)

Burada ‘27 Mayýs 1980’ tarihini, strptime() fonksiyonu yardýmýyla bir datetime nesnesine dönüþtürdük. Ayný þeyi þu þekilde de yapabiliriz:

>>> import time
>>> t = '27 Mayýs 1980'
>>> tarih = time.strptime(t, '%d %B %Y')
>>> tarih

time.struct_time(tm_year=1980, tm_mon=5, tm_mday=27,
tm_hour=0, tm_min=0, tm_sec=0, tm_wday=1, tm_yday=148,
tm_isdst=-1)

Gördüðünüz gibi, time modülünün strptime() fonksiyonu datetime modülü içindeki strptime() fonksiyonunun aksine bir struct_time nesnesi veriyor.


sleep()

sleep() fonksiyonu, time modülünün en sýk kullanýlan araçlarýndan bir tanesidir. Bu fonksiyonu kullanarak kodlarýmýzýn iþleyiþini belli sürelerle kesintiye uðratabiliriz.

Basit bir örnek verelim:

>>> for i in range(10):
... time.sleep(1)
... print(i)

Bu kodlarý çalýþtýrdýðýnýzda, 0’dan 10’a kadar olan sayýlar ekrana basýlýrken her bir sayý arasýna 1’er saniyelik duraklamalar eklendiðini göreceksiniz. Eðer arzu ederseniz bu süreyi 1 saniyenin de altýna çekebilirsiniz:

>>> for i in range(10):
... time.sleep(0.5)
... print(i)

Gördüðünüz gibi, sleep() fonksiyonuna 0.5 parametresini vererek, duraklama süresinin 500 milisaniye olmasýný saðladýk.

time modülünün sleep() fonksiyonunu, kodlarýnýz arasýna duraklama eklemek istediðiniz her durumda kullanabilirsiniz.

